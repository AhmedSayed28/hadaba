function CheckValidationForm(_Input, Type,errorFieldName) {
		var errorMsg;
		var testresults;
		var number;
		number = _Input;
		var filter = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
		if (Type=="NIN" ) {
				_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!validateSpecial(_Input)) {
				showError("error11",errorFieldName);
				return false;
			}
			  else if (!isInteger(_Input)) {
				showError("error11",errorFieldName);
				return false;
			}	else if (_Input.length != 10) {
				showError("error2",errorFieldName);
				return false;
			} else if (_Input && !isNIN(_Input)) {
				showError("error5",errorFieldName);
				return false;
			} else {
				return (true);
			}
		} else	if (Type=="Iqama" ) {
				_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}
			else if (!validateSpecial(_Input)) {
				showError("error11",errorFieldName);
				return false;
			}
			else if (!isInteger(_Input)) {
				showError("error11",errorFieldName);
				return false;
			} else if (_Input.length != 10) {
				showError("error3",errorFieldName);
				return false;
			} else if (_Input && !isIQAMA(_Input)) {
				showError("error6",errorFieldName);
				return false;
			} else {
				return (true);
			}
		} else	if (Type=="NINOrIqama" ) {
				_Input = _Input.trim();
			 if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}
			else if (!validateSpecial(_Input)) {
				showError("error11",errorFieldName);
				return false;
			}
			else if (!isInteger(_Input)) {
				showError("error11",errorFieldName);
				return false;
			}
			else if (_Input.length != 10) {
				showError("error4",errorFieldName);
				return false;
			} else if ((_Input && isIQAMA(_Input))|| (_Input && isNIN(_Input))) {
				return (true);
			} else {
				showError("error7",errorFieldName);
				return false;
			}
		} else if(Type=="Mobile"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!validateSpecial(_Input)) {
				showError("error13",errorFieldName);
				return false;
			} else if (!isInteger(_Input)) {
				showError("error13",errorFieldName);
				return false;
			} else if (_Input.length!=10) {
				showError("error13",errorFieldName);
				return false;
			} else if (!/^(05)(5|0|3|6|4|9|1|8|7)([0-9]{7})$/.test(_Input)) {
				showError("error13",errorFieldName);
				return false;
			} else {
				return (true);
			}
		} else if(Type=="Email"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!validateEmail(_Input)) {
				showError("error15",errorFieldName);
				return false;
			}else {
				return (true);
			}
		} else if(Type=="Contributor"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!validateSpecial(_Input)) {
				showError("error11",errorFieldName);
				return false;
			} else if (!isInteger(_Input)) {
				showError("error11",errorFieldName);
				return false;
			}  else {
				return (true);
			}
		}
		else if(Type=="Number"){
		_Input = _Input.trim();
		if (_Input == "") {
			showError("error1",errorFieldName);
			return false;
		} else if (!validateSpecial(_Input)) {
			showError("error11",errorFieldName);
			return false;
		} else if (!isInteger(_Input)) {
			showError("error11",errorFieldName);
			return false;
		} else {
			return (true);
		}
	} else if(Type=="GCCNumber"){
		_Input = _Input.trim();
		if (_Input == "") {
			showError("error1",errorFieldName);
			return false;
		} else if (!validateSpecial(_Input)) {
			showError("error11",errorFieldName);
			return false;
		} else if (!isInteger(_Input)) {
			showError("error11",errorFieldName);
			return false;
		} else if (_Input.length < 8 || _Input.length > 9) {
			showError("error13",errorFieldName);
			return false;
		} else {
			return (true);
		}
	} else if(Type=="Name"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}else if(!validateSpecial(_Input)) {
				showError("error17",errorFieldName);
				return false;
			}else if(isInteger(_Input)) {
				showError("error17",errorFieldName);
				return false;
            }else if(! /^[a-zA-Z\s]+$/.test(_Input)  && !/^[\u0600-\u06FF\s]+$/.test(_Input)) {
				showError("error17",errorFieldName);
				return false;
			} else {
				return (true);
			}
		}
		else if(Type=="FullName"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}
			else if (!_Input.length >= 9 || ( !/^[a-zA-Z]{2,}(?: [a-zA-Z]+){2,}$/.test(_Input) && !/^[\u0600-\u06FF]{2,}(?: [\u0600-\u06FF]+){2,}$/.test(_Input)) ) {
			showError("error32",errorFieldName);
			return false;
			}
			else if(!validateSpecial(_Input)) {
				showError("error17",errorFieldName);
				return false;
			}else if(isInteger(_Input)) {
				showError("error17",errorFieldName);
				return false;
            }else if(! /^[a-zA-Z\s]+$/.test(_Input)  && !/^[\u0600-\u06FF\s]+$/.test(_Input)) {
				showError("error17",errorFieldName);
				return false;
			} else {
				return (true);
			}
		}
		else if(Type=="StringWithSpaces"){
			_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}else if(!/^[a-zA-Z\d\s]*$/.test(_Input) && !/^[\u0600-\u06FF\u0621-\u064A0-9\d\s]+$/.test(_Input)) {
				showError("error20",errorFieldName);
				return false;
			} else {
				return (true);
			}
		} else if(Type=="BirthDate"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!isDate(_Input)) {
			showError("error12",errorFieldName);
				return false;
			} else {
				return (true);
			}
		} else if(Type=="HijriBirthDate"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!isHijriDate(_Input)) {
			showError("error30",errorFieldName);
				return false;
			} else {
				return (true);
			}
		}
		else if(Type=="Password"){
		_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else 	if ( _Input.length < 8) {
				showError("error25",errorFieldName);
				return false;
			} else 	if ( !/^(?=.*[A-Z])/.test(_Input)) {
				showError("error26",errorFieldName);
				return false;
			} else 	if ( !/^(?=.*[a-z])/.test(_Input)) {
				showError("error27",errorFieldName);
				return false;
			} else 	if ( !/^(?=.*\d)/.test(_Input)) {
				showError("error28",errorFieldName);
				return false;
			} else 	if ( !/^(?=.*[ !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~])/.test(_Input)) {
				showError("error29",errorFieldName);
				return false;
			} 				
			// else if ( !/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]{8,}/.test(_Input)) {
			// showError("error25",errorFieldName);
				// return false;
			// }
			else {
				return (true);
			}
		}
		else if(Type=="Details"){
			_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}
			else if (/[\/\\]+/.test(_Input)) {
				showError("error33",errorFieldName);
				return false;
			}
			else if(!/^[a-zA-Z\u0600-\u06FF\u0621-\u064A0-9\d\s,.:?-]+$/.test(_Input)) {
				showError("error31",errorFieldName);
				return false;
			}
			else {
				return (true);
			}
		}
		else if(Type=="ActivityTypes"){
			_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			}
			else if (/[\/\\]+/.test(_Input)) {
			
				showError("error33",errorFieldName);
				return false;
			}
			else if(!/^[a-zA-Z\d\s,،.():-]+$/.test(_Input) && !/^[\u0600-\u06FF\u0621-\u064A0-9\d\s,،.():-]+$/.test(_Input)) {
				showError("error34",errorFieldName);
				return false;
			}
			else {
				return (true);
			}
		}
		else if(Type=="Date"){
			_Input = _Input.trim();
			if (_Input == "") {
				showError("error1",errorFieldName);
				return false;
			} else if (!CheckDate(_Input,errorFieldName)) {
				//showError("error12",errorFieldName);
				return false;
			} else {
				return (true);
			}
		}
		else {
				//_Input = _Input.trim();
		if (_Input == null || _Input.trim() == "") {
				showError("error1",errorFieldName);
				return false;
		}else {
		return (true);
	}
	}
	}
	
		function validateEmail(email) {
			// var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            var re = /^[A-Za-z0-9]+[A-Za-z0-9._%+-]*@[A-Za-z0-9]+[A-Za-z0-9.-]*\.[A-Za-z]{2,6}$/
			return re.test(email);
		}
		function isNIN(input) {
			return isNINOrIqama(input, 'N');
		}

		function isIQAMA(input) {
			return isNINOrIqama(input, 'I');
		}
		function isNINOrIqama(input, NINOrIqama) {
		if (isNumber(input) == true) {
			var inpv = input;
			lastDigit = inpv.substring(9, 10);
			A1 = inpv.substring(8, 9);
			A2 = inpv.substring(7, 8);
			A3 = inpv.substring(6, 7);
			A4 = inpv.substring(5, 6);
			A5 = inpv.substring(4, 5);
			A6 = inpv.substring(3, 4);
			A7 = inpv.substring(2, 3);
			A8 = inpv.substring(1, 2);
			A9 = inpv.substring(0, 1);
	if ((NINOrIqama == 'N' && A9 != '1')
						|| (NINOrIqama == 'I' && A9 != '2')) {
					return false;
				}
			C = A1 * 1 + A3 * 10 + A5 * 100 + A7 * 1000 + A9 * 10000;
			D = "" + C * 2;
			if (D.length == 5) {
				D = '0' + D;
			}
			D1 = D.substring(5, 6);
			D2 = D.substring(4, 5);
			D3 = D.substring(3, 4);
			D4 = D.substring(2, 3);
			D5 = D.substring(1, 2);
			D6 = D.substring(0, 1);
			E = parseFloat(D1) + parseFloat(A2) + parseFloat(D2)
					+ parseFloat(A4) + parseFloat(D3) + parseFloat(A6)
					+ parseFloat(D4) + parseFloat(A8) + parseFloat(D5)
					+ parseFloat(D6)
			E = "" + E
			if (E.length == 1) {
				E = '0' + E;
			}
			E1 = E.substring(1, 2);
			E2 = E.substring(0, 1);
			F = (parseFloat(E2) + 1) * 10;
			F = "" + F
			G = F - E;
			G1 = "" + G;
			if (G > 9) {
				G = G1.substring(1, 2);
			}
			if (lastDigit == G) {
				return true;
			}

		}
		return false;
	}

	//  To check Given Number  is Numeric and specific length
	function isNumber(input) {
		if (!isEmpty(input) == true) {
			if (!(isInteger(input) && checknumber(input))) {
				return false;
			}
		}
		return true;
	}

	function isInteger(input) {
	if(input == 0)
	return true;
		var l = 0;
		for (i = 0; i < input.length; i++) {
			// Check that current character is number.
			if (input.charAt(i) == ",") {
				l = 1;
			}
		}
		input = actualValue(input);
		s = input;
		var i;
		if (isEmpty(input)) {

			if (l == 1)
				input = amountAfterRefreshed(input);
			return false;
		}
		for (i = 0; i < s.length; i++) {
			var c = s.charAt(i);
			if (!isDigit(c)) {
				if (l == 1)
					input = amountAfterRefreshed(input);
				return false;
			}
		}
		if (l == 1)
			input = amountAfterRefreshed(input);
		return true;
	}

	function isEmpty(input) {

		var str = input;
		for (var intLoop = 0; intLoop < str.length; intLoop++) {
			if (" " != str.charAt(intLoop)) {
				return false;
			}
		}
		return true;
	}

	function checknumber(input) {
		if(input == 0)
		return true;
		var l = 0;
		for (i = 0; i < input.length; i++) {
			if (input.charAt(i) == ",") {
				l = 1;
			}
		}
		var input = actualValue(input);
		if ((isNaN(input)) || (eval(input) <= 0)) {
			if (l == 1)
				input = amountAfterRefreshed(input);
			return false;
		} else {
			if (l == 1)
				input = amountAfterRefreshed(input);
			return true;
		}
	}

	function actualValue(amount) {
		var j = 0;
		var sstr = '';
		var tmp = '';
		var pressed = amount.length;
		for (i = 0; i <= pressed; i++) {
			sstr = amount.substring(pressed - (i + 1), pressed - i);
			if (sstr != ',') {
				tmp = sstr + tmp;
			} else {
				j++;
			}
		}
		if (j > 0) {
			return tmp;
		} else {
			return amount;
		}
	}

	function amountAfterRefreshed(amountField) {
		var m = 0;
		finalValue = '';
		var tmp = '';
		var fstpart = '';
		amount = eval(amountField);
		finalValue = actualValue(amount.value);
		m = checkForOneDot(finalValue)
		tmp = finalValue.split('.')
		fstpart = insertComma(tmp[0])
		if (fstpart == '') {
			fstpart = '';
		}
		if (tmp[1] >= 0) {
			amount.value = fstpart + '.' + tmp[1]
		} else {
			if (m > 0) {
				amount.value = fstpart + ".";
			} else {
				amount.value = fstpart;
			}
		}
		return amount.value;
	}
	function isDigit(c) {
		return ((c >= "0") && (c <= "9"));
	}

	function validateSpecial(inputTxt) {
		var iChars = "!@#$%^&*()+=-[]\\\';,./{}|\":<>?";
		var i = 0;
		while (i < inputTxt.length) {
			if (iChars.indexOf(inputTxt.charAt(i)) != -1) {
				return false;
			}
			i++;
		}
		return true;
	}

	//New stuff after this

	function isDataInteger(b) {
	    var a;
	    for (a = 0; a < b.length; a++) {
	        var d = b.charAt(a);
	        if (((d < "0") || (d > "9"))) {
	            return false
	        }
	    }
	    return true
	}

	function stripCharsInBag(d, e) {
	    var b;
	    var a = "";
	    for (b = 0; b < d.length; b++) {
	        var f = d.charAt(b);
	        if (e.indexOf(f) == -1) {
	            a += f
	        }
	    }
	    return a
	}

	function daysInFebruary(a) {
	    return (((a % 4 == 0) && ((!(a % 100 == 0)) || (a % 400 == 0))) ? 29 : 28)
	}

	function DaysArray(b) {
	    for (var a = 1; a <= b; a++) {
	        this[a] = 31;
	        if (a == 4 || a == 6 || a == 9 || a == 11) {
	            this[a] = 30
	        }
	        if (a == 2) {
	            this[a] = 29
	        }
	    }
	    return this
	}

	function isDate(d) {
	var dtCh="/";
	    var a = DaysArray(12);
	    var e = d.indexOf(dtCh);
	    var c = d.indexOf(dtCh, e + 1);
	    var g = d.substring(0, e);
	    var h = d.substring(e + 1, c);
	    var f = d.substring(c + 1);
		var minYear = 1250;
		var maxYear = 2100;
	    strYr = f;
	    if (g.charAt(0) == "0" && g.length > 1) {
	        g = g.substring(1)
	    }
	    if (h.charAt(0) == "0" && h.length > 1) {
	        h = h.substring(1)
	    }
	    for (var b = 1; b <= 3; b++) {
	        if (strYr.charAt(0) == "0" && strYr.length > 1) {
	            strYr = strYr.substring(1)
	        }
	    }
	    month = parseInt(h);
	    day = parseInt(g);
	    year = parseInt(strYr);
	    if (e == -1 || c == -1) {
	        //alert("الرجاء إدخال تاريخ صحيح بصيغة (ي ي/ش ش/ع ع ع ع)");
	        return false
	    }
	    if (h.length < 1 || month < 1 || month > 12) {
	       // alert("الرجاء إدخال شهر صحيح");
	        return false
	    }
	    if (g.length < 1 || day < 1 || day > 31 || (month == 2 && day > daysInFebruary(year)) || day > a[month]) {
	        //alert("الرجاء إدخال يوم صحيح");
	        return false
	    }
	    if (f.length != 4 || year == 0 || year < minYear || (year > 1500 && year < 1800) || year > maxYear) {
	        //alert("الرجاء إدخال تاريخ صحيح يكون بين  ا " + minYear + " و " + maxYear);
	        return false
	    }
	    if (d.indexOf(dtCh, c + 1) != -1 || isDataInteger(stripCharsInBag(d, dtCh)) == false) {
	        //alert("الرجاء إدخال التاريخ الصحيح");
	        return false
	    }
	    return true
	}
	
	function isHijriDate(d) {
	var dtCh="/";
	    var e = d.indexOf(dtCh);
	    var c = d.indexOf(dtCh, e + 1);
	    var g = d.substring(0, e);
	    var h = d.substring(e + 1, c);
	    var f = d.substring(c + 1);
		var minYear = 1250;
		var maxYear = 1500;
	    strYr = f;
	    if (g.charAt(0) == "0" && g.length > 1) {
	        g = g.substring(1)
	    }
	    if (h.charAt(0) == "0" && h.length > 1) {
	        h = h.substring(1)
	    }
	    for (var b = 1; b <= 3; b++) {
	        if (strYr.charAt(0) == "0" && strYr.length > 1) {
	            strYr = strYr.substring(1)
	        }
	    }
	    month = parseInt(h);
	    day = parseInt(g);
	    year = parseInt(strYr);
	    if (e == -1 || c == -1) {
	        //alert("الرجاء إدخال تاريخ صحيح بصيغة (ي ي/ش ش/ع ع ع ع)");
	        return false
	    }
	    if (h.length < 1 || month < 1 || month > 12) {
	       // alert("الرجاء إدخال شهر صحيح");
	        return false
	    }
	    if (g.length < 1 || day < 1 || day > 30 ) {
	        //alert("الرجاء إدخال يوم صحيح");
	        return false
	    }
	    if (f.length != 4 || year == 0 || year < minYear || year > maxYear) {
	        //alert("الرجاء إدخال تاريخ صحيح يكون بين  ا " + minYear + " و " + maxYear);
	        return false
	    }
	    if (d.indexOf(dtCh, c + 1) != -1 || isDataInteger(stripCharsInBag(d, dtCh)) == false) {
	        //alert("الرجاء إدخال التاريخ الصحيح");
	        return false
	    }
	    return true
	}
	
	function checkFilesExtensions (fieldName){
		try{
		var fileName = fieldName.files[0].name;
		var fileSize;
		if(typeof fieldName.files[0].size === "number")
		fileSize = fieldName.files[0].size;
		else
		fileSize = 0;
		var ext = fileName.split('.').pop().toLowerCase();
		if($.inArray(ext, ['pdf','jpeg','png','jpg']) == -1 || (fileSize > 2097152)) {
		return false;
		}else
		return true;
		}catch(err) {
		return true;
		}
		}
	
	function CheckDate(dateString,errorFieldName) {
		var regEx = /^\d{4}-\d{2}-\d{2}$/;
		if(!dateString.match(regEx)){
			showError("error35",errorFieldName);
			return false;  // Invalid format
		}
		var d = new Date(dateString);
		var dNum = d.getTime();
		if(!dNum && dNum !== 0){
			showError("error12",errorFieldName);
			return false; // NaN value, Invalid date
		}
		return d.toISOString().slice(0,10) === dateString;
	}
	//Converts Eastern Arabic digits into Western Arabic and updates the field's valus.
	function toEnNumerals(field) {
		if (field){
			var convertedNumerals = field.value.replace(/[٠١٢٣٤٥٦٧٨٩]/g, function (digit) { return digit.charCodeAt(0) - 1632 });
			field.value = convertedNumerals;
		}
	}
